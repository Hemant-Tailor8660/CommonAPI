/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/commonapi/examples/E02AttributesStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace commonapi {
namespace examples {

E02AttributesStubDefault::E02AttributesStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(E02Attributes::getInterfaceVersion()) {
}

const CommonAPI::Version& E02AttributesStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

E02AttributesStubRemoteEvent* E02AttributesStubDefault::initStubAdapter(const std::shared_ptr< E02AttributesStubAdapter> &_adapter) {
    CommonAPI::Stub<E02AttributesStubAdapter, E02AttributesStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

 const int32_t& E02AttributesStubDefault::getXAttribute() {
     return xAttributeValue_;
 }

 const int32_t& E02AttributesStubDefault::getXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getXAttribute();
 }

 void E02AttributesStubDefault::setXAttribute(int32_t _value) {
     std::shared_ptr<E02AttributesStubAdapter> stubAdapter = CommonAPI::Stub<E02AttributesStubAdapter,
     E02AttributesStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockXAttribute(true);
         const bool valueChanged = (xAttributeValue_ != _value);
         if (valueChanged) {
             xAttributeValue_ = std::move(_value);
             fireXAttributeChanged(xAttributeValue_);
         }
         stubAdapter->lockXAttribute(false);
     } else {
         const bool valueChanged = trySetXAttribute(std::move(_value));
         if (valueChanged) {
             fireXAttributeChanged(xAttributeValue_);
         }
     }
}

 bool E02AttributesStubDefault::trySetXAttribute(int32_t _value) {
     if (!validateXAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<E02AttributesStubAdapter> stubAdapter = CommonAPI::Stub<E02AttributesStubAdapter, E02AttributesStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockXAttribute(true);
         valueChanged = (xAttributeValue_ != _value);
         xAttributeValue_ = std::move(_value);
         stubAdapter->lockXAttribute(false);
     } else {
         valueChanged = (xAttributeValue_ != _value);
         xAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool E02AttributesStubDefault::validateXAttributeRequestedValue(const int32_t &_value) {
     (void)_value;
     return true;
 }

 void E02AttributesStubDefault::setXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value) {
     (void)_client;
     setXAttribute(_value);
 }

 void E02AttributesStubDefault::onRemoteXAttributeChanged() {
     // No operation in default
 }

 void E02AttributesStubDefault::RemoteEventHandler::onRemoteXAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteXAttributeChanged();
 }

 bool E02AttributesStubDefault::RemoteEventHandler::onRemoteSetXAttribute(int32_t _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetXAttribute(std::move(_value));
 }

 bool E02AttributesStubDefault::RemoteEventHandler::onRemoteSetXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value) {
     (void)_client;
     return onRemoteSetXAttribute(_value);
 }

 const ::v1::commonapi::examples::CommonTypes::a1Struct& E02AttributesStubDefault::getA1Attribute() {
     return a1AttributeValue_;
 }

 const ::v1::commonapi::examples::CommonTypes::a1Struct& E02AttributesStubDefault::getA1Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getA1Attribute();
 }

 void E02AttributesStubDefault::setA1Attribute(::v1::commonapi::examples::CommonTypes::a1Struct _value) {
     std::shared_ptr<E02AttributesStubAdapter> stubAdapter = CommonAPI::Stub<E02AttributesStubAdapter,
     E02AttributesStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockA1Attribute(true);
         const bool valueChanged = (a1AttributeValue_ != _value);
         if (valueChanged) {
             a1AttributeValue_ = std::move(_value);
             fireA1AttributeChanged(a1AttributeValue_);
         }
         stubAdapter->lockA1Attribute(false);
     } else {
         const bool valueChanged = trySetA1Attribute(std::move(_value));
         if (valueChanged) {
             fireA1AttributeChanged(a1AttributeValue_);
         }
     }
}

 bool E02AttributesStubDefault::trySetA1Attribute(::v1::commonapi::examples::CommonTypes::a1Struct _value) {
     if (!validateA1AttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<E02AttributesStubAdapter> stubAdapter = CommonAPI::Stub<E02AttributesStubAdapter, E02AttributesStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockA1Attribute(true);
         valueChanged = (a1AttributeValue_ != _value);
         a1AttributeValue_ = std::move(_value);
         stubAdapter->lockA1Attribute(false);
     } else {
         valueChanged = (a1AttributeValue_ != _value);
         a1AttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool E02AttributesStubDefault::validateA1AttributeRequestedValue(const ::v1::commonapi::examples::CommonTypes::a1Struct &_value) {
     (void)_value;
     return true;
 }

 void E02AttributesStubDefault::setA1Attribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::commonapi::examples::CommonTypes::a1Struct _value) {
     (void)_client;
     setA1Attribute(_value);
 }

 void E02AttributesStubDefault::onRemoteA1AttributeChanged() {
     // No operation in default
 }

 void E02AttributesStubDefault::RemoteEventHandler::onRemoteA1AttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteA1AttributeChanged();
 }

 bool E02AttributesStubDefault::RemoteEventHandler::onRemoteSetA1Attribute(::v1::commonapi::examples::CommonTypes::a1Struct _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetA1Attribute(std::move(_value));
 }

 bool E02AttributesStubDefault::RemoteEventHandler::onRemoteSetA1Attribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::commonapi::examples::CommonTypes::a1Struct _value) {
     (void)_client;
     return onRemoteSetA1Attribute(_value);
 }





E02AttributesStubDefault::RemoteEventHandler::RemoteEventHandler(E02AttributesStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace examples
} // namespace commonapi
} // namespace v1
