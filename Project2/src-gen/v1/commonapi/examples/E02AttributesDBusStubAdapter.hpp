/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201801251438.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_EXAMPLES_E02_Attributes_DBUS_STUB_ADAPTER_HPP_
#define V1_COMMONAPI_EXAMPLES_E02_Attributes_DBUS_STUB_ADAPTER_HPP_

#include <v1/commonapi/examples/E02AttributesStub.hpp>
#include "v1/commonapi/examples/E02AttributesDBusDeployment.hpp"
#include <v1/commonapi/examples/CommonTypesDBusDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace commonapi {
namespace examples {

template <typename _Stub = ::v1::commonapi::examples::E02AttributesStub, typename... _Stubs>
class E02AttributesDBusStubAdapterInternal
    : public virtual E02AttributesStubAdapter,
      public CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...>
     {
public:
    typedef CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...> E02AttributesDBusStubAdapterHelper;

    ~E02AttributesDBusStubAdapterInternal() {
        deactivateManagedInstances();
        E02AttributesDBusStubAdapterHelper::deinit();
    }

    virtual bool hasFreedesktopProperties() {
        return false;
    }

    inline static const char* getInterface() {
        return E02Attributes::getInterface();
    }

    void fireXAttributeChanged(const int32_t& value);

    void fireA1AttributeChanged(const ::v1::commonapi::examples::CommonTypes::a1Struct& value);

    void deactivateManagedInstances() {
    }

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::commonapi::examples::E02AttributesStub,
        CommonAPI::Version
        > getE02AttributesInterfaceVersionStubDispatcher;

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
            ::v1::commonapi::examples::E02AttributesStub,
            int32_t,
            CommonAPI::DBus::IntegerDeployment
            > getXAttributeStubDispatcher;
    static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
            ::v1::commonapi::examples::E02AttributesStub,
            int32_t,
            CommonAPI::DBus::IntegerDeployment
            > setXAttributeStubDispatcher;

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
            ::v1::commonapi::examples::E02AttributesStub,
            ::v1::commonapi::examples::CommonTypes::a1Struct,
            ::v1::commonapi::examples::CommonTypes_::a1StructDeployment_t
            > getA1AttributeStubDispatcher;
    static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
            ::v1::commonapi::examples::E02AttributesStub,
            ::v1::commonapi::examples::CommonTypes::a1Struct,
            ::v1::commonapi::examples::CommonTypes_::a1StructDeployment_t
            > setA1AttributeStubDispatcher;

    E02AttributesDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
    : CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      E02AttributesDBusStubAdapterHelper(_address, _connection, false, _stub) {
        E02AttributesDBusStubAdapterHelper::addStubDispatcher({ "getXAttribute", "" }, &getXAttributeStubDispatcher);
        E02AttributesDBusStubAdapterHelper::addStubDispatcher({ "setXAttribute", "i" }, &setXAttributeStubDispatcher);
        E02AttributesDBusStubAdapterHelper::addStubDispatcher({ "getA1Attribute", "" }, &getA1AttributeStubDispatcher);
        E02AttributesDBusStubAdapterHelper::addStubDispatcher({ "setA1Attribute", "(s(ibd))" }, &setA1AttributeStubDispatcher);
        E02AttributesDBusStubAdapterHelper::addStubDispatcher({ "getInterfaceVersion", "" }, &getE02AttributesInterfaceVersionStubDispatcher);
    }

protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const {
        static const std::string introspectionData =
            "<method name=\"getInterfaceVersion\">\n"
                "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"getXAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"setXAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"i\" direction=\"out\" />\n"
            "</method>\n"
            "<signal name=\"onXAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
            "</signal>\n"
            "<method name=\"getA1Attribute\">\n"
            "<arg name=\"value\" type=\"(s(ibd))\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"setA1Attribute\">\n"
            "<arg name=\"requestedValue\" type=\"(s(ibd))\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"(s(ibd))\" direction=\"out\" />\n"
            "</method>\n"
            "<signal name=\"onA1AttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(s(ibd))\" />\n"
            "</signal>\n"
            ;
        return introspectionData.c_str();
    }

private:
};


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
    ::v1::commonapi::examples::E02AttributesStub,
    CommonAPI::Version
    > E02AttributesDBusStubAdapterInternal<_Stub, _Stubs...>::getE02AttributesInterfaceVersionStubDispatcher(&E02AttributesStub::lockInterfaceVersionAttribute, &E02AttributesStub::getInterfaceVersion, "uu");

template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::commonapi::examples::E02AttributesStub,
        int32_t,
        CommonAPI::DBus::IntegerDeployment
        > E02AttributesDBusStubAdapterInternal<_Stub, _Stubs...>::getXAttributeStubDispatcher(
            &::v1::commonapi::examples::E02AttributesStub::lockXAttribute,
            &::v1::commonapi::examples::E02AttributesStub::getXAttribute
            , "i"
            );
template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::commonapi::examples::E02AttributesStub,
        int32_t,
        CommonAPI::DBus::IntegerDeployment
        > E02AttributesDBusStubAdapterInternal<_Stub, _Stubs...>::setXAttributeStubDispatcher(
                &::v1::commonapi::examples::E02AttributesStub::lockXAttribute,
                &::v1::commonapi::examples::E02AttributesStub::getXAttribute,
                &E02AttributesStubRemoteEvent::onRemoteSetXAttribute,
                &E02AttributesStubRemoteEvent::onRemoteXAttributeChanged
                ,&E02AttributesStubAdapter::fireXAttributeChanged
                ,"i"
                );

template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::commonapi::examples::E02AttributesStub,
        ::v1::commonapi::examples::CommonTypes::a1Struct,
        ::v1::commonapi::examples::CommonTypes_::a1StructDeployment_t
        > E02AttributesDBusStubAdapterInternal<_Stub, _Stubs...>::getA1AttributeStubDispatcher(
            &::v1::commonapi::examples::E02AttributesStub::lockA1Attribute,
            &::v1::commonapi::examples::E02AttributesStub::getA1Attribute
            , "(s(ibd))"
            );
template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::commonapi::examples::E02AttributesStub,
        ::v1::commonapi::examples::CommonTypes::a1Struct,
        ::v1::commonapi::examples::CommonTypes_::a1StructDeployment_t
        > E02AttributesDBusStubAdapterInternal<_Stub, _Stubs...>::setA1AttributeStubDispatcher(
                &::v1::commonapi::examples::E02AttributesStub::lockA1Attribute,
                &::v1::commonapi::examples::E02AttributesStub::getA1Attribute,
                &E02AttributesStubRemoteEvent::onRemoteSetA1Attribute,
                &E02AttributesStubRemoteEvent::onRemoteA1AttributeChanged
                ,&E02AttributesStubAdapter::fireA1AttributeChanged
                ,"(s(ibd))"
                );

template <typename _Stub, typename... _Stubs>
void E02AttributesDBusStubAdapterInternal<_Stub, _Stubs...>::fireXAttributeChanged(const int32_t& value) {
    CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deployedValue(value, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        int32_t,
        CommonAPI::DBus::IntegerDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onXAttributeChanged",
            "i",
            deployedValue
    
    );
}

template <typename _Stub, typename... _Stubs>
void E02AttributesDBusStubAdapterInternal<_Stub, _Stubs...>::fireA1AttributeChanged(const ::v1::commonapi::examples::CommonTypes::a1Struct& value) {
    CommonAPI::Deployable< CommonTypes::a1Struct, ::v1::commonapi::examples::CommonTypes_::a1StructDeployment_t> deployedValue(value, static_cast< ::v1::commonapi::examples::CommonTypes_::a1StructDeployment_t* >(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::commonapi::examples::CommonTypes::a1Struct,
        ::v1::commonapi::examples::CommonTypes_::a1StructDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onA1AttributeChanged",
            "(s(ibd))",
            deployedValue
    
    );
}


template <typename _Stub = ::v1::commonapi::examples::E02AttributesStub, typename... _Stubs>
class E02AttributesDBusStubAdapter
    : public E02AttributesDBusStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< E02AttributesDBusStubAdapter<_Stub, _Stubs...>> {
public:
    E02AttributesDBusStubAdapter(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
        : CommonAPI::DBus::DBusStubAdapter(
            _address,
            _connection,
            false),
          E02AttributesDBusStubAdapterInternal<_Stub, _Stubs...>(
            _address,
            _connection,
            _stub) {
    }
};

} // namespace examples
} // namespace commonapi
} // namespace v1

#endif // V1_COMMONAPI_EXAMPLES_E02_Attributes_DBUS_STUB_ADAPTER_HPP_
